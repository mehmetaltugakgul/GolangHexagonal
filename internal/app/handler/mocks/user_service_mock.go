// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/handler/user.go

// Package mocks is a generated GoMock package.
package mocks

import (
	model "golangHexagonal/internal/app/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserActions is a mock of UserActions interface.
type MockUserActions struct {
	ctrl     *gomock.Controller
	recorder *MockUserActionsMockRecorder
}

// MockUserActionsMockRecorder is the mock recorder for MockUserActions.
type MockUserActionsMockRecorder struct {
	mock *MockUserActions
}

// NewMockUserActions creates a new mock instance.
func NewMockUserActions(ctrl *gomock.Controller) *MockUserActions {
	mock := &MockUserActions{ctrl: ctrl}
	mock.recorder = &MockUserActionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserActions) EXPECT() *MockUserActionsMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserActions) CreateUser(user *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserActionsMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserActions)(nil).CreateUser), user)
}

// DeleteUser mocks base method.
func (m *MockUserActions) DeleteUser(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserActionsMockRecorder) DeleteUser(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserActions)(nil).DeleteUser), id)
}

// GetUserByID mocks base method.
func (m *MockUserActions) GetUserByID(id uint) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", id)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserActionsMockRecorder) GetUserByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserActions)(nil).GetUserByID), id)
}

// GetUsers mocks base method.
func (m *MockUserActions) GetUsers() ([]*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers")
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockUserActionsMockRecorder) GetUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockUserActions)(nil).GetUsers))
}

// UpdateUser mocks base method.
func (m *MockUserActions) UpdateUser(user *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserActionsMockRecorder) UpdateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserActions)(nil).UpdateUser), user)
}
