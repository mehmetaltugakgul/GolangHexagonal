// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/handler/auth.go

// Package mocks is a generated GoMock package.
package mocks

import (
	model "golangHexagonal/internal/app/model"
	service "golangHexagonal/internal/app/service"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthActions is a mock of AuthActions interface.
type MockAuthActions struct {
	ctrl     *gomock.Controller
	recorder *MockAuthActionsMockRecorder
}

// MockAuthActionsMockRecorder is the mock recorder for MockAuthActions.
type MockAuthActionsMockRecorder struct {
	mock *MockAuthActions
}

// NewMockAuthActions creates a new mock instance.
func NewMockAuthActions(ctrl *gomock.Controller) *MockAuthActions {
	mock := &MockAuthActions{ctrl: ctrl}
	mock.recorder = &MockAuthActionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthActions) EXPECT() *MockAuthActionsMockRecorder {
	return m.recorder
}

// AuthenticateUser mocks base method.
func (m *MockAuthActions) AuthenticateUser(email, password string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticateUser", email, password)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthenticateUser indicates an expected call of AuthenticateUser.
func (mr *MockAuthActionsMockRecorder) AuthenticateUser(email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateUser", reflect.TypeOf((*MockAuthActions)(nil).AuthenticateUser), email, password)
}

// MockJWTActions is a mock of JWTActions interface.
type MockJWTActions struct {
	ctrl     *gomock.Controller
	recorder *MockJWTActionsMockRecorder
}

// MockJWTActionsMockRecorder is the mock recorder for MockJWTActions.
type MockJWTActionsMockRecorder struct {
	mock *MockJWTActions
}

// NewMockJWTActions creates a new mock instance.
func NewMockJWTActions(ctrl *gomock.Controller) *MockJWTActions {
	mock := &MockJWTActions{ctrl: ctrl}
	mock.recorder = &MockJWTActionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTActions) EXPECT() *MockJWTActionsMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m *MockJWTActions) GenerateToken(userID uint) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockJWTActionsMockRecorder) GenerateToken(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockJWTActions)(nil).GenerateToken), userID)
}

// VerifyToken mocks base method.
func (m *MockJWTActions) VerifyToken(tokenString string) (*service.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", tokenString)
	ret0, _ := ret[0].(*service.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockJWTActionsMockRecorder) VerifyToken(tokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockJWTActions)(nil).VerifyToken), tokenString)
}
